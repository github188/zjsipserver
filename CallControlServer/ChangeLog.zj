原始版本: reSiprocate-1.2.3 已升级至1.4.1版本

1. 增加功能: 如果某个站点注册到本服务器,则将其视为受信站点 

   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   涉及文件: repro/monkeys/IsTrustedNode.cxx L43-L52 注释: 检查请求的From域,验证uri是否注册过
             repro/monkeys/IsTrustedNode.hxx L18-L21 L30-L32
	     repro/repro.cxx L292 注释: 使用新的构造函数构建IsTrustedNode类
   日期: 2008-10-29	     

   新建class repro/megaeyes/MegaIsTrustedNode继承自IsTrustedNode,不再修改IsTrustedNode类
   日期: 2008-12-15
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   
   预期更新: 为了在proxy-proxy之间的消息传递避免挑战式验证,还需要进一步更改. !!! 2008-11-18. 
   一个方案是启动时带-disable-auth参数，来取消所有的验证 2008-11-25

   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   在MessageFilterRule.cxx增加一个对于user name的检查,如果不匹配,也不由本服务负责.主要适用于dum
   **修改ServerAuthManager::handle函数,只认证注册请求**
   目前基本明确会启动三种服务:B2BUA Dum(UAS) Prxoy
   以上修改日期: 2008-12-11

   本来想创建类MegaMessageFilterRule继承自MessageFilterRule,但是因为dum等类对MessageFilterRule依赖很强烈,因此暂不新建
   日期: 2008-12-15
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2. 增加功能: 为dum增加host检查规则,如果请求的Request-URI和添加的host匹配则由dum处理,否则由下一个TU处理(这里是proxy)
   涉及文件: repro/repro.cxx L428-L436   日期: 2008-10-29. (已取消)
   涉及文件: repro/repro.cxx resip/stack/MessageFilterRule.cxx 增加调用ismydomain函数来解决 日期: 2008-11-25
   
3. 增加功能: 为dum增加处理Subscribe请求的能力(来自客户端的订阅)
   涉及文件: repro/repro.cxx L439
   涉及文件: repro/megaeyes/MegaSubscriptionHandler.cxx 新增一个类继承自ServerSubscriptionHandler类,实现onNewSubscription/onRefresh/onExpired接口
   涉及文件: repro/megaeyes/XmlContents.cxx 新增一个类继承自Contents,用于获取电信的content-type: application/global_eye_v10+xml 
   参考文件: resip/stack/ContentsFactory.hxx L24. 
   参考文件: resip/stack/ContentsFactoryBase.cxx L15. 
   参考函数: DialogUsageManager::validateContent

	     
4. 增加功能: 为dum增加发出Notify请求的能力(发给客户端)
   涉及文件: repro/megaeyes/MegaSubscriptionHandler.cxx,放到了NotifyUsers函数里.


5. 增加功能: 为dum增加处理Message请求的能力(来自前端的报警信息) 注意: 3 4 5相互关联构成一个报警的逻辑整体
   涉及文件: repro/repro.cxx L438
   涉及文件: repro/megaeyes/MegaPagerMessageHandler.cxx 新增一个类继承自ServerPagerMessageHandler类,实现onMessageArrived接口.注意还得管理好资源释放功能
   	     着重看DialogSet.cxx L570,这里new出来的mServerPagerMessage没有释放						      
	     我注意到:ServerPagerMessage::send函数将会执行delete this来释放对象


6. 增加功能: 为dum增加发出Message请求的能力(发给前端,用于参数配置/前端存储通知)
   涉及文件: MegaHttpConnection.cxx MegaWebServer.cxx MegaWebServerThread.cxx MegaPagerMessageHandler.cxx(实现clientpagemessage的回调) 
   日期: 2008-12-17

7. 增加功能: 为dum增加把Register的信息发送给平台设备管理中心的功能

8. 代码重构: 把在MessageFilterRule和IsTrustedNode里的更改提取出来,放到自己的继承类里
   只继承了IsTrustedNode, 没有继承MessageFilterRule	     
   2009-01-05: MessageFilterRule.cxx：严格了对服务名字的判断 in matchs函数 
   

10. 增加功能: 为dum增加B2BUA的逻辑实体,处理Invite/Info请求等相互关联的会话逻辑实体
    涉及文件: repro/repro.cxx L432-L436

11. B2BUA
    2009-01-05: 将b2bua的记录日志方式改成统一的resip使用的方式.
    2009-01-07: 调整MediaProxy.cxx的updateSdp函数的内容,支持我们的流程
    2009-01-07: MediaManager::setALegSdp函数传入callid, 包括B2BCall::setALegSdp也一样.这样做的目的是使每个mediaproxy都使用callid做标识
		为B2BCall的onEarlyMedia函数增加一个MyAppDialog的参数		
		让MediaManager在构造时自己产生callid而不是由B2BCall传给他一个
		
    2009-01-08: 修改完B2BCall的appdialog管理,实现了c offer t answer c 的模式,但是还需要实现 c nooffer t offer c answer t 模式
		修改完MediaManager对A端的MediaProxy的管理,支持多个A端MediaProxy		

    11.1  重要的修改:要妥为管理各个dialog的新建实践,这会涉及到修改B2BCall原有的状态机,比如doNewCall的修改. 
	  这个B2BCall的建立者会调用doNewCall,但是之后的参加者就不会了,而是调用其他函数.

	  后来者会先查询有没有和自己请求的视频匹配的B2BCall,如果没有就新建,如果有就加入

	  根据什么关键字来查找B2BCall呢?我的方案是(按照电信规范): destinationAddr(Uri里面含有前端标识和视频或音频通道号),
	  再加上sdp里的medium的name()这个name用来表示媒体是video还是audio

	  当查询B2BCall时,先根据关键字从B2BCallManager里找出所有符合条件的B2BCall,然后如果里面有c2v2t类型的,那么就加入这个B2BCall.
	  如果没有,那么就新建一个B2BCall

	  现在说一下加入的逻辑过程:当发现有一个c2v2t类型的B2BCall时,调用其的add函数加入进去,如果这时B2BCall还未处于CallActive状态即还没有建立好,那么就返回失败,
	  如果已经处于CallActive状态,那么同步执行向分发发起请求并得到新的sdp,然后返回给请求者的操作.即在请求者的onOffer或者onrequireOffer里就给他sdp.
	  特别的说明就是加入者不会执行B2BCall的doNewCall();doAuthorizationPending();doAuthorizationSuccess();doMediaProxySuccess();doReadyToDial();doCallAccepted();
	  这些函数.

	  或者加入者被放到B2BCall的一个临时容器里,每次循环执行doCallActive时处理这些加入者(仍然比较复杂).

    11.2  要改动B2BCall的onOffer和OnAnswer函数,因为这两个函数都假定了offer是由a端发来的,answer是由b端发来的,其实这是不成立的,a端可能不发offer而发answer
	  b端可能不发answer而发offer

    11.3  	          	  	  

    		    
